user  www-data;
worker_processes  4;

pid        /var/run/nginx.pid;

events {
    worker_connections  10240;
}

worker_rlimit_nofile    20000;  #each connection needs a filehandle (or 2 if you are proxying)

http {

    types_hash_bucket_size 128;
    types_hash_max_size 2048;
    server_names_hash_bucket_size 128;

    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    error_log  /var/log/nginx/error.log  error;

    sendfile        on;
    tcp_nopush     on;

    keepalive_timeout  65;

    gzip            on;
    gzip_min_length 1000;
    gzip_proxied    any;
    gzip_types text/plain text/css image/png image/gif image/jpeg application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript ;

    # When defining a hostname on a proxy_pass directive, nginx resolves it
    # upon initialization, and then uses the IP address. When dealing with
    # upstreams in docker containers, their IP's may frequently change. To
    # work around this, we use a variable as a proxy_pass target, and define a
    # resolver. This causes nginx to periodically re-resolve the upstream
    # hostnames. The IP address 127.0.0.11 belongs to docker's builtin
    # DNS server. See https://tenzer.dk/nginx-with-dynamic-upstreams/ for more
    # details.
    resolver 127.0.0.11 ipv6=off valid=10s;

    server {
        include         /etc/nginx/nginx-listen.conf;
        underscores_in_headers  on;

        #security -mostly- related headers
        add_header Strict-Transport-Security "max-age=31536000";
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";

        client_body_timeout 300s;
        client_body_buffer_size     10M;
        client_max_body_size        10M;

        rewrite ^/api/swagger-ui(.*)$ $scheme://$host:$server_port/swagger/swagger-ui$1 break;

        location / {
            # See note above `resolver` as to why we use a variable here.
            set $upstream "http://api";
            proxy_pass $upstream;
            proxy_set_header  X-Real-IP  $remote_addr;
            proxy_set_header Host $http_host;
            proxy_read_timeout 600s;
            proxy_connect_timeout 200s;
            proxy_buffering off;
        }

        location = /api/v1 {
            proxy_pass http://swagger:8080/;
            proxy_set_header  X-Real-IP  $remote_addr;
            proxy_read_timeout 600s;
            proxy_connect_timeout 200s;
            proxy_buffering off;
        }

        location = /api/v1/ {
            return 301 /api/v1;
        }

        location = /api/v2/ {
            return 301 /api/v2;
        }

        location = /api/v2 {
            default_type text/html;
            alias /srv/www/static/openapi/index.html;
        }

        location = /api/v2/spec {
            set $upstream "http://api-v2:8080/openapi.yaml";
            proxy_pass $upstream;
            proxy_set_header  X-Real-IP  $remote_addr;
            proxy_read_timeout 600s;
            proxy_connect_timeout 200s;
            proxy_buffering off;
        }

        location /static/ {
            root /srv/www;
        }

        location /robots.txt {
            alias /srv/www/static/robots.txt;
        }

        location /socket/ {
            # See note above `resolver` as to why we use a variable here.
            set $upstream "http://sockjs:8081";
            proxy_pass $upstream;
            proxy_set_header  X-Real-IP  $remote_addr;
            proxy_read_timeout 600;
            proxy_connect_timeout 200;
            proxy_buffering off;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /ui/ {
            # See note above `resolver` as to why we use a variable and rewrite here.
            set $upstream "http://ui";
            rewrite ^/ui/(.*) /$1 break;
            proxy_pass $upstream;
            proxy_set_header  X-Real-IP  $remote_addr;
            proxy_read_timeout 600s;
            proxy_connect_timeout 200s;
            proxy_buffering off;
        }

        location /ui-dev/ {
            rewrite ^/ui-dev/(.*) /$1 break;
            proxy_pass http://ui:8000;
            proxy_set_header  X-Real-IP  $remote_addr;
            proxy_read_timeout 600s;
            proxy_connect_timeout 200s;
            proxy_buffering off;
        }

        location /swagger/ {
            proxy_pass http://swagger:8080/;
            proxy_set_header  X-Real-IP  $remote_addr;
            proxy_read_timeout 600s;
            proxy_connect_timeout 200s;
            proxy_buffering off;
        }

        location /landing/ {
            # See note above `resolver` as to why we use a variable and rewrite here.
            set $upstream "http://landing";
            rewrite ^/landing/(.*) /$1 break;
            proxy_pass $upstream;
            proxy_set_header  X-Real-IP  $remote_addr;
            proxy_read_timeout 600s;
            proxy_connect_timeout 200s;
            proxy_buffering off;
        }

        location /landing-dev/ {
            rewrite ^/landing-dev/(.*) /$1 break;
            proxy_pass http://landing:8000;
            proxy_set_header  X-Real-IP  $remote_addr;
            proxy_read_timeout 600s;
            proxy_connect_timeout 200s;
            proxy_buffering off;
        }

        location /portal/ {
            proxy_pass http://portal:80;
            rewrite ^/portal/(.*) /$1 break;
            proxy_set_header  X-Real-IP  $remote_addr;
            proxy_read_timeout 600s;
            proxy_connect_timeout 200s;
            proxy_buffering off;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /portal-dev/ {
            proxy_pass http://portal:8000;
            rewrite ^/portal-dev/(.*) /$1 break;
            proxy_set_header  X-Real-IP  $remote_addr;
            proxy_read_timeout 600s;
            proxy_connect_timeout 200s;
            proxy_buffering off;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /__web-dev-server__web-socket.js {
            proxy_pass http://portal:8000;
            # rewrite ^/portal/(.*) /$1 break;
            proxy_set_header  X-Real-IP  $remote_addr;
            proxy_read_timeout 600s;
            proxy_connect_timeout 200s;
            proxy_buffering off;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        location /wds {
            proxy_pass http://portal:8000;
            # rewrite ^/portal/(.*) /$1 break;
            proxy_set_header  X-Real-IP  $remote_addr;
            proxy_read_timeout 600s;
            proxy_connect_timeout 200s;
            proxy_buffering off;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /ingress/ {
            # See note above `resolver` as to why we use a variable and rewrite here.
            set $upstream "http://traefik";
            rewrite ^/ingress/(.*) /$1 break;
            proxy_pass $upstream;
            proxy_set_header  X-Real-IP  $remote_addr;
        }

        location ~ ^/(ssh|proxy|lxd-exec|docker-attach|k8s-exec|stream)/ {
            proxy_pass http://sheller:8086;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location ~ ^/ssh/jobs/ {
            proxy_pass http://sheller:8086;
            proxy_http_version 1.1;
        }

        location /wsproxy {
            proxy_pass http://wsproxy:8764;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /api/v2 {
            proxy_pass http://api-v2:8080/api/v2;
            proxy_set_header  X-Real-IP  $remote_addr;
            proxy_read_timeout 600s;
            proxy_connect_timeout 200s;
            proxy_buffering off;
        }

   }
}
